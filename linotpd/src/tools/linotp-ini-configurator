#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    LinOTP - the open source solution for two factor authentication
#    Copyright (C) 2010 - 2016 LSE Leading Security Experts GmbH
#
#    This file is part of LinOTP server.
#
#    This program is free software: you can redistribute it and/or
#    modify it under the terms of the GNU Affero General Public
#    License, version 3, as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the
#               GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    E-mail: linotp@lsexperts.de
#    Contact: www.linotp.org
#    Support: www.lsexperts.de
#


VERSION = '0.1'
import os, sys
from getopt import getopt, GetoptError
from ConfigParser import ConfigParser, NoSectionError, NoOptionError


def findConfigSection(config, name, defaultSection=None):
    for temp in config.sections():
        if temp.lower() == name.lower():
            return temp
    return defaultSection

def findConfigOption(config, section, name, defaultOption=None):
    for temp in config.options(section):
        if temp.lower() == name.lower():
            return temp
    return defaultOption


def getConfigKey(file, option, section=None, autoResolvePath=False, caseSensitive=False):
    config  = ConfigParser()
    if not caseSensitive:
        config.optionxform = str

    cfgfile = open(file, 'r')
    try:
        config.readfp(cfgfile)
    finally:
        cfgfile.close()

    if option:
        if not section:
            section = 'DEFAULT'

        if caseSensitive:
            if not config.has_section(section):
                return False
            if not config.has_option(section, option):
                return False
            tmp1 = section
            tmp2 = option
        else:
            tmp1 = findConfigSection(config, section)
            if tmp1 is None:
                return False
            tmp2 = findConfigOption(config, tmp1, option)
            if tmp2 is None:
                return False

        if autoResolvePath:
            config_path = os.path.abspath(os.path.dirname(file))

            value = config.get(section, option, 0, {'here': config_path})
        else:
            value = config.get(section, option, 1)

        print value
    else:
        if not section:
            list = config.sections()
        else:
            if caseSensitive:
                if not config.has_section(section):
                    return False
                tmp1 = section
            else:
                tmp1 = findConfigSection(config, section)
                if tmp1 is None:
                    return False

            list = config.options(tmp1)

        for elem in list:
            print elem

    return True


def setConfigKey(file, option, value, section=None, caseSensitive=False):
    config  = ConfigParser()
    if not caseSensitive:
        config.optionxform = str

    cfgfile = open(file, 'r')
    try:
        config.readfp(cfgfile)
    finally:
        cfgfile.close()

    if not section:
        section = 'DEFAULT'

    if caseSensitive:
        try:
            temp = config.get(section, option, 1)
            if not (temp is None) and temp == value:
                # No change, return
                return False
        except NoSectionError:
            config.add_section(section)
        except NoOptionError:
            pass

        tmp1 = section
        tmp2 = option
    else:
        # Find section...
        tmp1 = findConfigSection(config, section)
        if tmp1 is None:
            config.add_section(section)
            tmp1 = section
        # Find option...
        tmp2 = findConfigOption(config, tmp1, option)
        if tmp2 is None:
            tmp2 = option
        else:
            temp = config.get(tmp1, tmp2, 1)
            if temp == value:
                # No change, return
                return False

    # Write the new entry...
    config.set(tmp1, tmp2, value)
    cfgfile = open(file, 'w')
    try:
        config.write(cfgfile)
    finally:
        cfgfile.close()
    return True


def delConfigKey(file, option, section=None, caseSensitive=False):
    config  = ConfigParser()
    if not caseSensitive:
        config.optionxform = str

    cfgfile = open(file, 'r')
    try:
        config.readfp(cfgfile)
    finally:
        cfgfile.close()

    if not section:
        section = 'DEFAULT'

    if caseSensitive:
        if not config.has_section(section): 
            return False
        tmp1 = section
    else:
        tmp1 = findConfigSection(config, section)
        if tmp1 is None:
            return False

    if option:
        if caseSensitive:
            if not config.has_option(tmp1, option):
                return False
            tmp2 = option
        else:
            tmp2 = findConfigOption(config, tmp1, option)
            if tmp2 is None:
                return False

        config.remove_option(tmp1, tmp2)
    else:
        config.remove_section(tmp1)

    cfgfile = open(file, 'w')
    try:
        config.write(cfgfile)
    finally:
        cfgfile.close()
    return True


def usage():
    print  '''
    Parameter:
    -f|--file|--config-file  <configfile.ini>
    [ -s|--section-name <name> ]
    [ -r|--read-key   <name> [--auto-resolve] ] |
      -w|--write-key  <name>  -v|--value <value> |
      -d|--delete-key <name>  |
         --delete-section ] |
    [--case-sensitive]
    -h|--help : help
    '''


def main():
    frce = False
    file = None
    oper = None
    sctn = None
    skey = None
    kval = None
    rslv = False
    ignc = True
    try:
        opts, args = getopt(sys.argv[1:], 'f:s:r:w:v:d:', [ 'help', 'force', \
            'file=',    'config-file=',   \
            'section=', 'section-name=',  \
            'read=',    'read-key=',      \
            'write=',   'write-key=',     \
                        'delete-key=',    \
                        'delete-section', \
            'value=',                     \
                        'auto-resolve',   \
                        'case-sensitive' ])
    except GetoptError:
        print "There is an error in your parameter syntax:"
        usage()
        sys.exit(1)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            sys.exit(255)
        # common options...
        elif opt in ('-f', '--file', '--config-file'):
            if not (file is None):
                print "Dupplicate option: " + opt
                sys.exit(254)
            file = arg
        elif opt in ('--force'):
            frce = True
        elif opt in ('-s', '--section', '--section-name'):
            if not (sctn is None):
                print "Dupplicate option: " + opt
                sys.exit(254)
            sctn = arg
        # operation...
        elif opt in ('-r', '--read', '--read-key'):
            if not (oper is None):
                print "Invalid option: " + opt
                sys.exit(254)
            oper = 1
            skey = arg
        elif opt in ('-w', '--write', '--write-key'):
            if not (oper is None):
                print "Invalid option: " + opt
                sys.exit(254)
            oper = 2
            skey = arg
        elif opt in ('-d', '--delete-key'):
            if not (oper is None):
                print "Invalid option: " + opt
                sys.exit(254)
            oper = 3
            skey = arg
        elif opt in ('--delete-section'):
            if not (oper is None):
                print "Invalid option: " + opt
                sys.exit(254)
            oper = 3
            skey = None
        # specific options...
        elif opt in ('--auto-resolve'):
            if oper <> 1 or rslv:
                print "Unexpected option: " + opt
                sys.exit(254)
            rslv = True
        elif opt in ('--case-sensitive'):
            ignc = False
        elif opt in ('-v', '--value'):
            if oper <> 2 or kval:
                print "Unexpected option: " + opt
                sys.exit(254)
            kval = arg
        else:
            print "Unsupported option: " + opt
            usage()
            sys.exit(254)

    if args:
        print "Unexpeted argument: " + args[0]
        usage()
        sys.exit(254)
    elif file is None:
        print "Required argument missing: file"
        sys.exit(254)

    retval = 0
    try:
        if oper is None or oper == 1:
            if not getConfigKey(file=file, section=sctn, option=skey, \
                                caseSensitive=not ignc, autoResolvePath=rslv) and not frce:
                retval = 1
        elif oper == 2:
            if not setConfigKey(file=file, section=sctn, option=skey, value=kval, \
                                caseSensitive=not ignc) and not frce:
                retval = 1
        elif oper == 3:
            if not delConfigKey(file=file, section=sctn, option=skey, \
                                caseSensitive=not ignc) and not frce:
                retval = 1
        else:
            raise AttributeError('Internal error, operation not supported: ' + oper)
    except:
        print sys.exc_info()[0]
        retval = 2
        #raise
    sys.exit(retval)

if __name__ == '__main__':
    main()
